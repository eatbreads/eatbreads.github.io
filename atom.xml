<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到小面包的小站🥝</title>
  
  
  <link href="https://eatbreads.github.io/atom.xml" rel="self"/>
  
  <link href="https://eatbreads.github.io/"/>
  <updated>2025-05-16T15:15:16.564Z</updated>
  <id>https://eatbreads.github.io/</id>
  
  <author>
    <name>小面包🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode刷题-双指针-283-11-15-42</title>
    <link href="https://eatbreads.github.io/posts/9aceeb2d.html"/>
    <id>https://eatbreads.github.io/posts/9aceeb2d.html</id>
    <published>2025-05-16T15:15:16.000Z</published>
    <updated>2025-05-16T15:15:16.564Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode哈希表经典题目解析</title>
    <link href="https://eatbreads.github.io/posts/b7b164ae.html"/>
    <id>https://eatbreads.github.io/posts/b7b164ae.html</id>
    <published>2025-05-15T15:38:24.000Z</published>
    <updated>2025-05-15T15:41:46.633Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode哈希表经典题目解析</h1><h2 id="1-两数之和">1. 两数之和</h2><h3 id="解法分析">解法分析</h3><h4 id="1-暴力枚举">1 暴力枚举</h4><ul><li>时间复杂度：O(n²)</li><li>空间复杂度：O(1)</li><li>思路：对每个元素x，枚举寻找target-x</li></ul><h4 id="2-排序双指针">2 排序双指针</h4><ul><li>时间复杂度：O(nlogn)</li><li>空间复杂度：O(n)</li><li>思路：<ol><li>用结构体保存值和原始下标</li><li>排序后从首尾向中间遍历</li><li>根据和与目标值的比较决定移动方向</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="built_in">A</span>()=<span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> v,<span class="type">int</span> i)&#123;value=v;index=i;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;A&gt; vec;</span><br><span class="line">        vec.<span class="built_in">resize</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            vec[i] = &#123;nums[i],i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](A x,A y)&#123;</span><br><span class="line">            <span class="keyword">return</span> x.value&lt;y.value;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left =<span class="number">0</span>, right = vec.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sum = vec[left].value+vec[right].value;</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> &#123;vec[left].index,vec[right].index&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;vec[left].index,vec[right].index&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-哈希表">3 哈希表</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li><li>思路：<ol><li>哈希表key存储值，value存储下标</li><li>遍历过程中查找target-x</li><li>没找到则将当前值加入哈希表</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashMap; <span class="comment">// 创建哈希表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> complement = target - nums[i]; <span class="comment">// 计算差值</span></span><br><span class="line">        <span class="comment">// 在哈希表中查找差值</span></span><br><span class="line">        <span class="keyword">if</span> (hashMap.<span class="built_in">find</span>(complement) != hashMap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;hashMap[complement], i&#125;; <span class="comment">// 找到返回下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        hashMap[nums[i]] = i; <span class="comment">// 存入哈希表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;; <span class="comment">// 没有找到返回空数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="49-字母异位词分组">49. 字母异位词分组</h2><h3 id="解法分析-2">解法分析</h3><h4 id="哈希表法">哈希表法</h4><ul><li>时间复杂度：O(nklogk)，k是字符串的最大长度</li><li>空间复杂度：O(nk)</li><li>思路：<ol><li>key为排序后的字符串</li><li>value为原始字符串数组</li><li>最后遍历哈希表整理结果</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        map&lt;string,vector&lt;string&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; str: strs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> s = str;</span><br><span class="line">            <span class="built_in">sort</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">            mp[str].<span class="built_in">emplace_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; kv: mp)</span><br><span class="line">        &#123;</span><br><span class="line">            ret.<span class="built_in">emplace_back</span>(kv.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="128-最长连续序列">128. 最长连续序列</h2><h3 id="解法分析-3">解法分析</h3><h4 id="哈希集合">哈希集合</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li><li>思路：<ol><li>将所有数字加入集合</li><li>遍历每个数x，寻找x+1, x+2…和x-1, x-2…</li><li>边遍历边从集合中删除</li><li>维护最大长度</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="type">int</span> count = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = *(st.<span class="built_in">begin</span>());</span><br><span class="line">            st.<span class="built_in">erase</span>(num);</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(st.<span class="built_in">find</span>(num+a)!=st.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">erase</span>(num+a);</span><br><span class="line">                cnt++;    a++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(st.<span class="built_in">find</span>(num-b)!=st.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">erase</span>(num-b);</span><br><span class="line">                cnt++;    b++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxlen = <span class="built_in">max</span>(cnt,maxlen);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细分析LeetCode中的经典哈希表题目，包括两数之和、字母异位词分组和最长连续序列</summary>
    
    
    
    <category term="算法题解" scheme="https://eatbreads.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="https://eatbreads.github.io/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://eatbreads.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="哈希表" scheme="https://eatbreads.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>比特币交易系统升级：UTXO集合与Merkle树实现</title>
    <link href="https://eatbreads.github.io/posts/9842f704.html"/>
    <id>https://eatbreads.github.io/posts/9842f704.html</id>
    <published>2025-05-13T15:48:18.000Z</published>
    <updated>2025-05-13T15:51:33.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比特币交易系统升级：UTXO集合与Merkle树"><a href="#比特币交易系统升级：UTXO集合与Merkle树" class="headerlink" title="比特币交易系统升级：UTXO集合与Merkle树"></a>比特币交易系统升级：UTXO集合与Merkle树</h1><h2 id="UTXO集合优化"><a href="#UTXO集合优化" class="headerlink" title="UTXO集合优化"></a>UTXO集合优化</h2><h3 id="1-为什么需要UTXO集合？"><a href="#1-为什么需要UTXO集合？" class="headerlink" title="1. 为什么需要UTXO集合？"></a>1. 为什么需要UTXO集合？</h3><p>传统方式下，查找未花费输出需要遍历整个区块链，这种方式效率低下。通过引入UTXO集合，我们可以直接查询当前所有未花费输出，大大提高效率。<br><img src="https://cdn-a.markji.com/files/6822f53ffae6898c0c26ffba_hd.png?e=1747153874484&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:c2Ro2_JRUcMxSSnArHqak3YBN28=" alt="图片1"></p><h3 id="2-UTXO集合实现"><a href="#2-UTXO集合实现" class="headerlink" title="2. UTXO集合实现"></a>2. UTXO集合实现</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UTXO集合结构体</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">UTXOSet</span> &#123;</span><br><span class="line">    blockchain: Blockchain,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">UTXOSet</span> &#123;</span><br><span class="line">    <span class="comment">// 重建UTXO集合</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">reindex</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="comment">// 清空当前bucket</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">db</span> = <span class="keyword">self</span>.blockchain.db.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        db.<span class="title function_ invoke__">drop_bucket</span>(UTXO_BUCKET)?;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取所有UTXO</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">utxos</span> = <span class="keyword">self</span>.blockchain.<span class="title function_ invoke__">find_all_utxo</span>()?;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存储到新的bucket</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">bucket</span> = db.<span class="title function_ invoke__">create_bucket</span>(UTXO_BUCKET)?;</span><br><span class="line">        <span class="keyword">for</span> (txid, outs) <span class="keyword">in</span> utxos &#123;</span><br><span class="line">            bucket.<span class="title function_ invoke__">put</span>(txid, <span class="title function_ invoke__">serialize</span>(&amp;outs)?)?;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新UTXO集合</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">update</span>(&amp;<span class="keyword">self</span>, block: &amp;Block) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">db</span> = <span class="keyword">self</span>.blockchain.db.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">bucket</span> = db.<span class="title function_ invoke__">get_bucket</span>(UTXO_BUCKET)?;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理新块中的交易</span></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">tx</span> <span class="keyword">in</span> &amp;block.transactions &#123;</span><br><span class="line">            <span class="comment">// 删除已花费输出</span></span><br><span class="line">            <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> &amp;tx.vin &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">outs</span> = deserialize::&lt;TXOutputs&gt;(&amp;bucket.<span class="title function_ invoke__">get</span>(&amp;input.txid)?)?;</span><br><span class="line">                outs.outputs.<span class="title function_ invoke__">remove</span>(input.vout <span class="keyword">as</span> <span class="type">usize</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> outs.outputs.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                    bucket.<span class="title function_ invoke__">delete</span>(&amp;input.txid)?;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bucket.<span class="title function_ invoke__">put</span>(&amp;input.txid, <span class="title function_ invoke__">serialize</span>(&amp;outs)?)?;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 添加新的未花费输出</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_outputs</span> = TXOutputs &#123; outputs: <span class="built_in">vec!</span>[] &#125;;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">output</span> <span class="keyword">in</span> &amp;tx.vout &#123;</span><br><span class="line">                new_outputs.outputs.<span class="title function_ invoke__">push</span>(output.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            bucket.<span class="title function_ invoke__">put</span>(&amp;tx.id, <span class="title function_ invoke__">serialize</span>(&amp;new_outputs)?)?;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merkle树实现"><a href="#Merkle树实现" class="headerlink" title="Merkle树实现"></a>Merkle树实现</h2><p><img src="https://cdn-a.markji.com/files/6822f8b22220c11a3674f080_hd.png?e=1747153874484&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:OfU55_MSwwx1dU654mki3gzdSuU=" alt="图片1"></p><h3 id="1-Merkle树的作用"><a href="#1-Merkle树的作用" class="headerlink" title="1. Merkle树的作用"></a>1. Merkle树的作用</h3><p>Merkle树允许轻节点（SPV节点）在不下载整个区块的情况下验证交易，只需要：</p><ul><li>交易哈希</li><li>Merkle树根哈希</li><li>Merkle路径</li></ul><h3 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2. 数据结构"></a>2. 数据结构</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Merkle树节点</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">MerkleNode</span> &#123;</span><br><span class="line">    left: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;MerkleNode&gt;&gt;,</span><br><span class="line">    right: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;MerkleNode&gt;&gt;,</span><br><span class="line">    data: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merkle树</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">MerkleTree</span> &#123;</span><br><span class="line">    root: <span class="type">Option</span>&lt;MerkleNode&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-核心实现"><a href="#3-核心实现" class="headerlink" title="3. 核心实现"></a>3. 核心实现</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">MerkleNode</span> &#123;</span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(left: <span class="type">Option</span>&lt;MerkleNode&gt;, right: <span class="type">Option</span>&lt;MerkleNode&gt;, data: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">combined</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        combined.<span class="title function_ invoke__">extend</span>(&amp;data);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(left) = &amp;left &#123;</span><br><span class="line">            combined.<span class="title function_ invoke__">extend</span>(&amp;left.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(right) = &amp;right &#123;</span><br><span class="line">            combined.<span class="title function_ invoke__">extend</span>(&amp;right.data);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">hash</span> = crypto::<span class="title function_ invoke__">sha256</span>(&amp;combined);</span><br><span class="line">        </span><br><span class="line">        MerkleNode &#123;</span><br><span class="line">            left: left.<span class="title function_ invoke__">map</span>(<span class="type">Box</span>::new),</span><br><span class="line">            right: right.<span class="title function_ invoke__">map</span>(<span class="type">Box</span>::new),</span><br><span class="line">            data: hash,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">MerkleTree</span> &#123;</span><br><span class="line">    <span class="comment">// 构建Merkle树</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(data: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">nodes</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建叶子节点</span></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">d</span> <span class="keyword">in</span> data &#123;</span><br><span class="line">            nodes.<span class="title function_ invoke__">push</span>(MerkleNode::<span class="title function_ invoke__">new</span>(<span class="literal">None</span>, <span class="literal">None</span>, d));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建树</span></span><br><span class="line">        <span class="keyword">while</span> nodes.<span class="title function_ invoke__">len</span>() &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_level</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..nodes.<span class="title function_ invoke__">len</span>()).<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">left</span> = nodes[i].<span class="title function_ invoke__">clone</span>();</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">right</span> = <span class="keyword">if</span> i + <span class="number">1</span> &lt; nodes.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                    nodes[i + <span class="number">1</span>].<span class="title function_ invoke__">clone</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nodes[i].<span class="title function_ invoke__">clone</span>()</span><br><span class="line">                &#125;;</span><br><span class="line">                </span><br><span class="line">                new_level.<span class="title function_ invoke__">push</span>(MerkleNode::<span class="title function_ invoke__">new</span>(</span><br><span class="line">                    <span class="title function_ invoke__">Some</span>(left),</span><br><span class="line">                    <span class="title function_ invoke__">Some</span>(right),</span><br><span class="line">                    <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            nodes = new_level;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        MerkleTree &#123;</span><br><span class="line">            root: <span class="keyword">if</span> nodes.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(nodes.<span class="title function_ invoke__">remove</span>(<span class="number">0</span>))</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-区块哈希计算优化"><a href="#4-区块哈希计算优化" class="headerlink" title="4. 区块哈希计算优化"></a>4. 区块哈希计算优化</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hash</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">        <span class="comment">// 构建交易的Merkle树</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">txs_data</span>: <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;&gt; = <span class="keyword">self</span>.transactions</span><br><span class="line">            .<span class="title function_ invoke__">iter</span>()</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|tx| tx.<span class="title function_ invoke__">hash</span>())</span><br><span class="line">            .<span class="title function_ invoke__">collect</span>();</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">tree</span> = MerkleTree::<span class="title function_ invoke__">new</span>(txs_data);</span><br><span class="line">        tree.root.<span class="title function_ invoke__">unwrap</span>().data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍比特币交易系统的升级实现，包括UTXO集合的管理和Merkle树的构建过程</summary>
    
    
    
    <category term="区块链开发" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="比特币" scheme="https://eatbreads.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包实战分析</title>
    <link href="https://eatbreads.github.io/posts/fe209838.html"/>
    <id>https://eatbreads.github.io/posts/fe209838.html</id>
    <published>2025-05-12T15:51:23.000Z</published>
    <updated>2025-05-13T15:51:33.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wireshark抓包实战分析"><a href="#Wireshark抓包实战分析" class="headerlink" title="Wireshark抓包实战分析"></a>Wireshark抓包实战分析</h1><h2 id="ARP协议分析"><a href="#ARP协议分析" class="headerlink" title="ARP协议分析"></a>ARP协议分析</h2><p>ARP（地址解析协议）用于将IP地址解析为MAC地址。通过Wireshark可以清晰地观察整个ARP请求和响应过程。</p><p><img src="https://cdn-a.markji.com/files/6821acd4e67106b1a989b5ef_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:5dem2mcOVAoMnhTUyZnHPtAPnng=" alt="图片1"></p><h3 id="ARP请求-响应分析"><a href="#ARP请求-响应分析" class="headerlink" title="ARP请求/响应分析"></a>ARP请求/响应分析</h3><ol><li>ARP请求广播</li><li>目标主机响应</li><li>MAC地址缓存</li></ol><h2 id="DNS协议分析"><a href="#DNS协议分析" class="headerlink" title="DNS协议分析"></a>DNS协议分析</h2><p>DNS查询过程展示了域名如何被解析为IP地址。为了安全考虑，建议配置HTTPS来防止DNS劫持。</p><p><img src="https://cdn-a.markji.com/files/6821ad90e67106b1a989d491_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:34DkpmluEwv7YEsfYDyd9C50keU=" alt="图片1"></p><h3 id="DNS安全配置"><a href="#DNS安全配置" class="headerlink" title="DNS安全配置"></a>DNS安全配置</h3><ol><li>使用加密DNS</li><li>配置HTTPS</li><li>防止DNS劫持</li></ol><h2 id="HTTP协议分析"><a href="#HTTP协议分析" class="headerlink" title="HTTP协议分析"></a>HTTP协议分析</h2><p>通过Wireshark可以完整地观察一次HTTP请求的全过程，包括：</p><p><img src="https://cdn-a.markji.com/files/6821add62d05657363d1dda0_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:4PWw6FUKqfCWgeXEe0737YRUWh0=" alt="图片1"></p><p><img src="https://cdn-a.markji.com/files/6821c057e67106b1a98c5d42_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:qPRSAnDi4pWgI5mHsv2qXLQOxT8=" alt="图片1"></p>]]></content>
    
    
    <summary type="html">使用Wireshark进行ARP、DNS和HTTP协议的抓包分析实战</summary>
    
    
    
    <category term="网络安全" scheme="https://eatbreads.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Wireshark" scheme="https://eatbreads.github.io/tags/Wireshark/"/>
    
    <category term="网络分析" scheme="https://eatbreads.github.io/tags/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
    <category term="安全" scheme="https://eatbreads.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark基础使用指南</title>
    <link href="https://eatbreads.github.io/posts/5c6d8554.html"/>
    <id>https://eatbreads.github.io/posts/5c6d8554.html</id>
    <published>2025-05-12T15:47:26.000Z</published>
    <updated>2025-05-12T15:50:12.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wireshark基础使用指南"><a href="#Wireshark基础使用指南" class="headerlink" title="Wireshark基础使用指南"></a>Wireshark基础使用指南</h1><h2 id="抓包设置"><a href="#抓包设置" class="headerlink" title="抓包设置"></a>抓包设置</h2><h3 id="选择网络接口"><a href="#选择网络接口" class="headerlink" title="选择网络接口"></a>选择网络接口</h3><ol><li>打开菜单栏 <code>Capture -&gt; Option</code></li><li>选择需要监听的网络接口（通常是WLAN）</li><li>点击开始捕获<br><img src="https://cdn-a.markji.com/files/682195012d05657363ced73b_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:RLpXwtfdryDBfAHCTal-s1GxD5Y=" alt="图片1"><h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2></li></ol><h3 id="1-分层结构"><a href="#1-分层结构" class="headerlink" title="1. 分层结构"></a>1. 分层结构</h3><p>Wireshark显示的数据包遵循OSI七层模型：</p><ul><li>物理层</li><li>数据链路层</li><li>网络层</li><li>传输层</li><li>会话层</li><li>表示层</li><li>应用层</li></ul><h3 id="2-数据显示"><a href="#2-数据显示" class="headerlink" title="2. 数据显示"></a>2. 数据显示</h3><p>每个数据包都有两种显示方式：</p><ul><li>分层协议详情</li><li>16进制原始数据</li></ul><h2 id="过滤器使用"><a href="#过滤器使用" class="headerlink" title="过滤器使用"></a>过滤器使用</h2><p>Wireshark提供两种类型的过滤器：</p><h3 id="1-捕获过滤器"><a href="#1-捕获过滤器" class="headerlink" title="1. 捕获过滤器"></a>1. 捕获过滤器</h3><ul><li>在开始捕获前设置</li><li>只捕获符合条件的数据包</li><li>减少系统资源占用</li><li>适合长时间抓包</li></ul><h3 id="2-显示过滤器"><a href="#2-显示过滤器" class="headerlink" title="2. 显示过滤器"></a>2. 显示过滤器</h3><ul><li>对已捕获的数据包进行过滤</li><li>不影响捕获过程</li><li>可以随时修改过滤条件</li><li>更灵活的过滤语法</li></ul><h2 id="常用过滤语法"><a href="#常用过滤语法" class="headerlink" title="常用过滤语法"></a>常用过滤语法</h2><h3 id="1-IP地址过滤"><a href="#1-IP地址过滤" class="headerlink" title="1. IP地址过滤"></a>1. IP地址过滤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 精确匹配</span><br><span class="line">ip.addr == 192.168.1.1</span><br><span class="line"></span><br><span class="line"># 模糊匹配</span><br><span class="line">ip.addr contains 192.168</span><br></pre></td></tr></table></figure><h3 id="2-协议过滤"><a href="#2-协议过滤" class="headerlink" title="2. 协议过滤"></a>2. 协议过滤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 单一协议</span><br><span class="line">http</span><br><span class="line"></span><br><span class="line"># 多协议组合</span><br><span class="line">http or https</span><br></pre></td></tr></table></figure><h3 id="3-端口过滤"><a href="#3-端口过滤" class="headerlink" title="3. 端口过滤"></a>3. 端口过滤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 精确匹配</span><br><span class="line">tcp.port == 80</span><br><span class="line"></span><br><span class="line"># 源端口</span><br><span class="line">tcp.srcport == 80</span><br><span class="line"></span><br><span class="line"># 目标端口</span><br><span class="line">tcp.dstport == 80</span><br></pre></td></tr></table></figure><h3 id="4-组合过滤"><a href="#4-组合过滤" class="headerlink" title="4. 组合过滤"></a>4. 组合过滤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># IP + 协议 + 端口</span><br><span class="line">ip.addr == 192.168.1.1 and http and tcp.port == 80</span><br><span class="line"></span><br><span class="line"># 多条件模糊匹配</span><br><span class="line">ip.addr contains 192.168 and tcp.port contains 80</span><br></pre></td></tr></table></figure><p><img src="https://cdn-a.markji.com/files/6821a908e67106b1a9894208_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:tGkfkJXjoSGZV175f6j50AysSOs=" alt="图片1"><br><img src="https://cdn-a.markji.com/files/6821ab572d05657363d18ed8_hd.png?e=1747062464240&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:y2irddxsCry90fqf5pfHmUof9PM=" alt="图片1"></p><h2 id="过滤器使用技巧"><a href="#过滤器使用技巧" class="headerlink" title="过滤器使用技巧"></a>过滤器使用技巧</h2><ol><li><p><strong>运算符</strong></p><ul><li><code>==</code> 精确匹配</li><li><code>contains</code> 包含匹配</li><li><code>and</code> 与</li><li><code>or</code> 或</li><li><code>not</code> 非</li></ul></li><li><p><strong>常用组合</strong></p><ul><li>特定IP的HTTP流量：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == 192.168.1.1 and http</span><br></pre></td></tr></table></figure></li><li>特定端口的TCP流量：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == 443 and tcp</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>保存过滤器</strong></p><ul><li>可以保存常用的过滤器表达式</li><li>方便快速切换不同的过滤条件</li></ul></li></ol>]]></content>
    
    
    <summary type="html">详细介绍Wireshark的基本使用方法，包括抓包设置、数据包分析和过滤器使用</summary>
    
    
    
    <category term="网络工具" scheme="https://eatbreads.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Wireshark" scheme="https://eatbreads.github.io/tags/Wireshark/"/>
    
    <category term="网络分析" scheme="https://eatbreads.github.io/tags/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
    <category term="抓包工具" scheme="https://eatbreads.github.io/tags/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基础配置与使用指南</title>
    <link href="https://eatbreads.github.io/posts/8a38e9a9.html"/>
    <id>https://eatbreads.github.io/posts/8a38e9a9.html</id>
    <published>2025-05-03T14:59:43.000Z</published>
    <updated>2025-05-03T15:03:12.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虽然是很久以前做的了-但是还是记录一下吧-因为五一没学习没东西更新博客了-嘻嘻">虽然是很久以前做的了,但是还是记录一下吧,因为五一没学习没东西更新博客了(嘻嘻)</h3><h1>Nginx基础配置与使用指南</h1><h2 id="Nginx简介">Nginx简介</h2><p>Nginx是一款轻量级的Web服务器和反向代理服务器，以其高性能、稳定性和低资源消耗而闻名。它可以作为HTTP服务器，也可以作为反向代理服务器，支持负载均衡等高级功能。</p><h2 id="基本命令">基本命令</h2><h3 id="1-服务管理">1. 服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优雅退出</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s quit</span><br></pre></td></tr></table></figure><h3 id="2-配置文件管理">2. 配置文件管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑主配置文件</span></span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看错误日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /usr/local/nginx/logs/error.log</span><br></pre></td></tr></table></figure><h2 id="配置详解">配置详解</h2><h3 id="1-基础配置结构">1. 基础配置结构</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主配置文件</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 包含其他配置文件</span></span><br><span class="line">    <span class="attribute">include</span> /usr/local/nginx/conf/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-站点配置示例">2. 站点配置示例</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网站根目录</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 默认首页</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 路径配置</span></span><br><span class="line">    <span class="section">location</span> /admin &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/admin;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-反向代理配置">3. 反向代理配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend-server;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见操作流程">常见操作流程</h2><h3 id="1-添加新站点">1. 添加新站点</h3><ol><li>创建配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/conf.d/mysite.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置内容</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> mysite.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/mysite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重新加载配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="2-故障排查">2. 故障排查</h3><ol><li>检查配置语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><ol start="2"><li>查看错误日志</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /usr/local/nginx/logs/error.log</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录Nginx的基本使用方法，包括服务管理、配置修改和反向代理设置</summary>
    
    
    
    <category term="运维笔记" scheme="https://eatbreads.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="服务器" scheme="https://eatbreads.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="运维" scheme="https://eatbreads.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Nginx" scheme="https://eatbreads.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>区块链钱包地址生成原理</title>
    <link href="https://eatbreads.github.io/posts/fcfcdc9e.html"/>
    <id>https://eatbreads.github.io/posts/fcfcdc9e.html</id>
    <published>2025-05-02T13:22:27.000Z</published>
    <updated>2025-05-02T13:25:52.995Z</updated>
    
    <content type="html"><![CDATA[<h1>区块链钱包地址生成原理</h1><h2 id="地址生成流程图">地址生成流程图</h2><p><img src="https://cdn-a.markji.com/files/6814c7319209d5011496b4fd_hd.png?e=1746194770056&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:P1YSyOXLmo8LmVfo4AY8uqr87AA=" alt="钱包地址生成流程"></p><h2 id="实现步骤">实现步骤</h2><h3 id="1-生成随机数">1. 生成随机数</h3><p>首先需要生成一个高质量的随机数作为种子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::OsRng;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用操作系统级别的随机数生成器</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rand</span> = rand::OsRng::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">unwrap</span>();</span><br></pre></td></tr></table></figure><p>这里使用了操作系统提供的随机数生成器，可以保证随机数的安全性和随机性。</p><h3 id="2-生成密钥对">2. 生成密钥对</h3><p>使用Ed25519椭圆曲线算法生成公私钥对：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> ed25519_dalek::&#123;Keypair, PublicKey, SecretKey&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成密钥对</span></span><br><span class="line"><span class="keyword">let</span> (secret_key, public_key) = ed25519::<span class="title function_ invoke__">keypair</span>(&amp;key);</span><br></pre></td></tr></table></figure><p>Ed25519是一种高效安全的椭圆曲线算法，广泛应用于区块链和加密货币领域。</p><h3 id="3-公钥哈希化">3. 公钥哈希化</h3><p>对公钥进行SHA256哈希运算：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> sha2::&#123;Sha256, Digest&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建SHA256哈希器</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher1</span> = Sha256::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="comment">// 输入公钥数据</span></span><br><span class="line">hasher1.<span class="title function_ invoke__">input</span>(pubKey);</span><br><span class="line"><span class="comment">// 获取哈希结果</span></span><br><span class="line">hasher1.<span class="title function_ invoke__">result</span>(pubKey);</span><br></pre></td></tr></table></figure><p>哈希化可以：</p><ul><li>缩短地址长度</li><li>提高安全性</li><li>增加地址的唯一性</li></ul><h3 id="4-Base58编码">4. Base58编码</h3><p>将哈希后的公钥转换为人类可读的格式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建地址结构</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">address</span> = Address &#123;</span><br><span class="line">    body: pub_hash,</span><br><span class="line">    scheme: Scheme::Base58, <span class="comment">// 使用Base58编码</span></span><br><span class="line">    hash_type: HashType::Script,</span><br><span class="line">    ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行编码</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">readable_address</span> = address.<span class="title function_ invoke__">encode</span>().<span class="title function_ invoke__">unwrap</span>();</span><br></pre></td></tr></table></figure><p>Base58编码的特点：</p><ul><li>避免使用容易混淆的字符</li><li>保持较高的信息密度</li><li>便于人工识别和输入</li></ul><h2 id="安全考虑">安全考虑</h2><ol><li><p><strong>随机数生成</strong></p><ul><li>使用密码学安全的随机数生成器</li><li>避免使用伪随机数</li><li>确保熵值充足</li></ul></li><li><p><strong>私钥保护</strong></p><ul><li>永远不在网络传输私钥</li><li>使用安全的存储方式</li><li>考虑多重签名机制</li></ul></li><li><p><strong>地址校验</strong></p><ul><li>添加校验和</li><li>验证地址格式</li><li>防止输入错误</li></ul></li></ol><h2 id="最佳实践">最佳实践</h2><ol><li><strong>密钥管理</strong></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全存储私钥</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">encrypted_key</span> = <span class="title function_ invoke__">encrypt_key</span>(&amp;secret_key, password);</span><br><span class="line"><span class="title function_ invoke__">save_to_keystore</span>(&amp;encrypted_key);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>地址验证</strong></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证地址有效性</span></span><br><span class="line"><span class="keyword">if</span> !address.<span class="title function_ invoke__">is_valid</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Invalid address format&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>错误处理</strong></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完善的错误处理</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">address</span> = <span class="keyword">match</span> Address::<span class="title function_ invoke__">new</span>(pub_hash) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(addr) =&gt; addr,</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">handle_error</span>(e),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍区块链钱包地址的生成过程，包括随机数生成、密钥对创建和地址编码</summary>
    
    
    
    <category term="区块链开发" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="加密算法" scheme="https://eatbreads.github.io/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>区块链网络通信流程详解</title>
    <link href="https://eatbreads.github.io/posts/a56f3323.html"/>
    <id>https://eatbreads.github.io/posts/a56f3323.html</id>
    <published>2025-05-01T13:02:30.000Z</published>
    <updated>2025-05-01T13:06:32.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链网络通信流程详解"><a href="#区块链网络通信流程详解" class="headerlink" title="区块链网络通信流程详解"></a>区块链网络通信流程详解</h1><h2 id="网络通信流程图"><a href="#网络通信流程图" class="headerlink" title="网络通信流程图"></a>网络通信流程图</h2><p><img src="https://cdn-a.markji.com/files/681371c72d056573630e9f46_hd.png?e=1746107367582&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:_6gQHn20mgVSAAOWAXrxm_fAnf4=" alt="区块链网络通信流程"></p><h2 id="接收方流程"><a href="#接收方流程" class="headerlink" title="接收方流程"></a>接收方流程</h2><h3 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1. 启动服务"></a>1. 启动服务</h3><ul><li>调用 <code>startServer</code></li><li>开始监听网络连接</li><li>准备接收其他节点的请求</li></ul><h3 id="2-版本处理-handleVersion"><a href="#2-版本处理-handleVersion" class="headerlink" title="2. 版本处理 (handleVersion)"></a>2. 版本处理 (handleVersion)</h3><ul><li>接收版本信息</li><li>比较区块高度<ul><li>如果自身区块链较短：请求获取新块</li><li>如果自身区块链较长：发送version给对方</li></ul></li><li>注意：发送version是发起同步请求的方式</li></ul><h3 id="3-清单处理-handleInv"><a href="#3-清单处理-handleInv" class="headerlink" title="3. 清单处理 (handleInv)"></a>3. 清单处理 (handleInv)</h3><ul><li>接收发送方的Inv清单<ul><li>包含块信息和交易信息</li></ul></li><li>分析清单内容<ul><li>确定需要下载的内容</li></ul></li><li>调用getData执行实际下载</li></ul><h3 id="4-区块处理-handleBlock"><a href="#4-区块处理-handleBlock" class="headerlink" title="4. 区块处理 (handleBlock)"></a>4. 区块处理 (handleBlock)</h3><ul><li>接收新区块</li><li>验证区块有效性</li><li>将新区块添加到本地链中</li><li>更新区块链状态</li></ul><h3 id="5-交易处理-handleTx"><a href="#5-交易处理-handleTx" class="headerlink" title="5. 交易处理 (handleTx)"></a>5. 交易处理 (handleTx)</h3><ul><li>接收新交易</li><li>验证交易有效性</li><li>将交易加入内存池</li><li>准备打包新区块</li></ul><h2 id="发送方流程"><a href="#发送方流程" class="headerlink" title="发送方流程"></a>发送方流程</h2><h3 id="1-服务启动"><a href="#1-服务启动" class="headerlink" title="1. 服务启动"></a>1. 服务启动</h3><ul><li>调用 <code>startServer</code></li><li>初始化网络服务</li><li>准备响应请求</li></ul><h3 id="2-区块获取请求处理-handleGetBlock"><a href="#2-区块获取请求处理-handleGetBlock" class="headerlink" title="2. 区块获取请求处理 (handleGetBlock)"></a>2. 区块获取请求处理 (handleGetBlock)</h3><ul><li>接收获取区块请求</li><li>查找请求的区块</li><li>准备区块数据</li><li>发送区块信息</li></ul><h3 id="3-数据请求处理-getData"><a href="#3-数据请求处理-getData" class="headerlink" title="3. 数据请求处理 (getData)"></a>3. 数据请求处理 (getData)</h3><ul><li>接收具体数据请求</li><li>根据请求类型处理<ul><li>区块请求：返回完整区块</li><li>交易请求：返回交易详情</li></ul></li><li>发送请求的数据</li></ul><h2 id="通信要点"><a href="#通信要点" class="headerlink" title="通信要点"></a>通信要点</h2><ol><li><p><strong>版本同步机制</strong></p><ul><li>通过version消息进行区块链状态同步</li><li>确保节点间数据一致性</li></ul></li><li><p><strong>数据传输流程</strong></p><ul><li>Inv清单作为数据索引</li><li>getData请求具体数据</li><li>分块传输避免网络拥堵</li></ul></li><li><p><strong>状态维护</strong></p><ul><li>跟踪待下载的区块</li><li>管理交易内存池</li><li>维护节点连接状态</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>网络断开重连</li><li>数据验证失败处理</li><li>超时重试机制</li></ul></li></ol><p>通过这种设计，我们实现了一个可靠的P2P网络通信机制，确保了区块链网络的正常运行和数据同步。</p>]]></content>
    
    
    <summary type="html">详细介绍区块链P2P网络中节点间的通信流程</summary>
    
    
    
    <category term="区块链开发" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="网络通信" scheme="https://eatbreads.github.io/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    <category term="流程图" scheme="https://eatbreads.github.io/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链网络部分实现</title>
    <link href="https://eatbreads.github.io/posts/5a225ca.html"/>
    <id>https://eatbreads.github.io/posts/5a225ca.html</id>
    <published>2025-04-30T15:32:26.000Z</published>
    <updated>2025-04-30T15:36:27.225Z</updated>
    
    <content type="html"><![CDATA[<h1>区块链网络实现详解</h1><h2 id="网络架构">网络架构</h2><p>区块链网络采用P2P（点对点）拓扑扁平结构，每个节点同时具备服务器和客户端的双重身份。这种去中心化的架构确保了网络的健壮性和可扩展性。</p><h3 id="节点类型">节点类型</h3><ol><li><p><strong>矿工节点</strong></p><ul><li>负责打包交易</li><li>进行工作量证明</li><li>广播新区块</li></ul></li><li><p><strong>全节点</strong></p><ul><li>存储完整的区块链数据</li><li>提供网络路由功能</li><li>验证交易和区块</li></ul></li><li><p><strong>SPV节点</strong>（简单支付验证）</p><ul><li>只存储区块头</li><li>维护特定交易子集</li><li>轻量级客户端实现</li></ul></li></ol><h2 id="网络通信流程">网络通信流程</h2><h3 id="1-版本验证">1. 版本验证</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Version消息结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Version</span> &#123;</span><br><span class="line">    version: <span class="type">i32</span>,</span><br><span class="line">    best_height: <span class="type">i32</span>,</span><br><span class="line">    addr_from: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-区块同步">2. 区块同步</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetBlocks消息结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GetBlocks</span> &#123;</span><br><span class="line">    addr_from: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inv消息结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Inv</span> &#123;</span><br><span class="line">    addr_from: <span class="type">String</span>,</span><br><span class="line">    type_: <span class="type">String</span>,  <span class="comment">// &quot;block&quot; 或 &quot;tx&quot;</span></span><br><span class="line">    items: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据请求">3. 数据请求</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetData消息结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GetData</span> &#123;</span><br><span class="line">    addr_from: <span class="type">String</span>,</span><br><span class="line">    type_: <span class="type">String</span>,</span><br><span class="line">    id: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心组件实现">核心组件实现</h2><h3 id="1-服务器启动">1. 服务器启动</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">start_server</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(&amp;<span class="keyword">self</span>.node_addr)?;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非中心节点需要同步</span></span><br><span class="line">    <span class="keyword">if</span> !<span class="keyword">self</span>.is_central_node &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">send_version</span>(CENTRAL_NODE_ADDR);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主循环处理连接</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">stream</span> <span class="keyword">in</span> listener.<span class="title function_ invoke__">incoming</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">handle_connection</span>(stream?);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-连接处理">2. 连接处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_connection</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, <span class="keyword">mut</span> stream: TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">command</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">read_command</span>(&amp;<span class="keyword">mut</span> stream)?;</span><br><span class="line">    <span class="keyword">match</span> command.<span class="title function_ invoke__">as_str</span>() &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_version</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        <span class="string">&quot;getblocks&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_get_blocks</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        <span class="string">&quot;inv&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_inv</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        <span class="string">&quot;getdata&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_get_data</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        <span class="string">&quot;block&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_block</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        <span class="string">&quot;tx&quot;</span> =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">handle_tx</span>(&amp;<span class="keyword">mut</span> stream),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Unknown command&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-版本处理">3. 版本处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_version</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">version</span>: Version = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查区块高度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.blockchain.<span class="title function_ invoke__">get_best_height</span>() &lt; version.best_height &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">send_get_blocks</span>(version.addr_from);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-区块请求处理">4. 区块请求处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_get_blocks</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">payload</span>: GetBlocks = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">blocks</span> = <span class="keyword">self</span>.blockchain.<span class="title function_ invoke__">get_block_hashes</span>();</span><br><span class="line">    <span class="keyword">self</span>.<span class="title function_ invoke__">send_inv</span>(payload.addr_from, <span class="string">&quot;block&quot;</span>, blocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-清单处理">5. 清单处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_inv</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">inv</span>: Inv = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    <span class="keyword">if</span> inv.type_ == <span class="string">&quot;block&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.blocks_in_transit = inv.items;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">send_get_data</span>(inv.addr_from, <span class="string">&quot;block&quot;</span>, <span class="keyword">self</span>.blocks_in_transit[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-数据请求处理">6. 数据请求处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_get_data</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">request</span>: GetData = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    <span class="keyword">if</span> request.type_ == <span class="string">&quot;block&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">block</span> = <span class="keyword">self</span>.blockchain.<span class="title function_ invoke__">get_block</span>(&amp;request.id)?;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">send_block</span>(request.addr_from, block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-区块处理">7. 区块处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_block</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">block</span>: Block = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    <span class="keyword">self</span>.blockchain.<span class="title function_ invoke__">add_block</span>(block)?;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 继续请求其他区块</span></span><br><span class="line">    <span class="keyword">if</span> !<span class="keyword">self</span>.blocks_in_transit.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.blocks_in_transit.<span class="title function_ invoke__">remove</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> !<span class="keyword">self</span>.blocks_in_transit.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">next_hash</span> = <span class="keyword">self</span>.blocks_in_transit[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">self</span>.<span class="title function_ invoke__">send_get_data</span>(stream.<span class="title function_ invoke__">peer_addr</span>()?, <span class="string">&quot;block&quot;</span>, next_hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-交易处理">8. 交易处理</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_tx</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, stream: &amp;<span class="keyword">mut</span> TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tx</span>: Transaction = <span class="title function_ invoke__">deserialize</span>(stream)?;</span><br><span class="line">    <span class="keyword">self</span>.mempool.<span class="title function_ invoke__">insert</span>(tx.id.<span class="title function_ invoke__">clone</span>(), tx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 作为矿工节点，收集足够交易后开始挖矿</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.is_miner &amp;&amp; <span class="keyword">self</span>.mempool.<span class="title function_ invoke__">len</span>() &gt;= MINING_THRESHOLD &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">txs</span>: <span class="type">Vec</span>&lt;Transaction&gt; = <span class="keyword">self</span>.mempool.<span class="title function_ invoke__">values</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">mine_block</span>(txs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍区块链P2P网络的实现原理和核心组件</summary>
    
    
    
    <category term="区块链开发" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="P2P网络" scheme="https://eatbreads.github.io/tags/P2P%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python调用大模型API实战</title>
    <link href="https://eatbreads.github.io/posts/ffa1ef1b.html"/>
    <id>https://eatbreads.github.io/posts/ffa1ef1b.html</id>
    <published>2025-04-30T15:17:28.000Z</published>
    <updated>2025-04-30T15:26:00.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python调用大模型API实战教程"><a href="#Python调用大模型API实战教程" class="headerlink" title="Python调用大模型API实战教程"></a>Python调用大模型API实战教程</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先需要安装openai库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openai</span><br></pre></td></tr></table></figure></p><h2 id="API申请"><a href="#API申请" class="headerlink" title="API申请"></a>API申请</h2><ol><li>访问 Deepseek 官网注册账号</li><li>在个人中心申请 API Key</li><li>获取到形如 <code>sk-0f2245****a0bb3f1e</code> 的密钥</li><li>充值以获得API调用额度</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a>1. 基础配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建OpenAI客户端</span></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=<span class="string">&quot;your-api-key&quot;</span>,  <span class="comment"># 替换为你的API密钥</span></span><br><span class="line">    base_url=<span class="string">&quot;https://api.deepseek.com/v1&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-定义Prompt模板"><a href="#2-定义Prompt模板" class="headerlink" title="2. 定义Prompt模板"></a>2. 定义Prompt模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PROMPT_TEMPLATES = &#123;</span><br><span class="line">    <span class="string">&quot;student_info&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;system&quot;</span>: <span class="string">&quot;&quot;&quot;你是一个专注于学生基本信息分析的教育数据专家。</span></span><br><span class="line"><span class="string">        - 擅长处理学生个人信息、人口统计学特征</span></span><br><span class="line"><span class="string">        - 注重学生信息的隐私保护</span></span><br><span class="line"><span class="string">        - 专注于人口特征统计和分布分析&quot;&quot;&quot;</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;background&quot;</span>: <span class="string">&quot;&quot;&quot;正在分析学生基本信息数据：</span></span><br><span class="line"><span class="string">        - 数据类型：学生个人基本信息</span></span><br><span class="line"><span class="string">        - 包含字段：学号、姓名、性别、年龄、籍贯等</span></span><br><span class="line"><span class="string">        - 分析目标：了解学生群体的基本特征分布&quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 其他模板</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据读取函数"><a href="#3-数据读取函数" class="headerlink" title="3. 数据读取函数"></a>3. 数据读取函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_data_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取数据文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> file_path.endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> pd.read_csv(file_path)</span><br><span class="line">    <span class="keyword">elif</span> file_path.endswith(<span class="string">&#x27;.xlsx&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> pd.read_excel(file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;不支持的文件格式，请使用 CSV 或 Excel 文件&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-创建分析请求"><a href="#4-创建分析请求" class="headerlink" title="4. 创建分析请求"></a>4. 创建分析请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_analysis_request</span>(<span class="params">data_type, specific_task, data_file=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建并发送分析请求&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> data_type <span class="keyword">not</span> <span class="keyword">in</span> PROMPT_TEMPLATES:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;不支持的数据类型: <span class="subst">&#123;data_type&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    template = PROMPT_TEMPLATES[data_type]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加数据概览</span></span><br><span class="line">    data_overview = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> data_file:</span><br><span class="line">        df = read_data_file(data_file)</span><br><span class="line">        data_overview = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        数据概览：</span></span><br><span class="line"><span class="string">        - 总记录数：<span class="subst">&#123;<span class="built_in">len</span>(df)&#125;</span></span></span><br><span class="line"><span class="string">        - 字段列表：<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(df.columns)&#125;</span></span></span><br><span class="line"><span class="string">        - 数据示例：\n<span class="subst">&#123;df.head(<span class="number">3</span>).to_string()&#125;</span></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: template[<span class="string">&quot;system&quot;</span>]&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: template[<span class="string">&quot;background&quot;</span>] + data_overview&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: specific_task&#125;</span><br><span class="line">        ],</span><br><span class="line">        temperature=<span class="number">0.3</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><h3 id="5-使用示例"><a href="#5-使用示例" class="headerlink" title="5. 使用示例"></a>5. 使用示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义分析任务</span></span><br><span class="line">specific_task = <span class="string">&quot;&quot;&quot;请分析以下内容：</span></span><br><span class="line"><span class="string">1. 数据完整性检查</span></span><br><span class="line"><span class="string">2. 主要指标的分布情况</span></span><br><span class="line"><span class="string">3. 异常值检测和处理建议</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出要求：</span></span><br><span class="line"><span class="string">- 格式：分点列出</span></span><br><span class="line"><span class="string">- 包含具体数值和百分比</span></span><br><span class="line"><span class="string">- 提供可视化建议&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行分析</span></span><br><span class="line">file_path = <span class="string">&quot;path/to/your/data.xlsx&quot;</span></span><br><span class="line">analysis_result = create_analysis_request(<span class="string">&quot;student_info&quot;</span>, specific_task, file_path)</span><br><span class="line"><span class="built_in">print</span>(analysis_result)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍如何使用Python调用大模型API，包括环境配置、API申请和代码实现</summary>
    
    
    
    <category term="编程开发" scheme="https://eatbreads.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="https://eatbreads.github.io/tags/Python/"/>
    
    <category term="AI" scheme="https://eatbreads.github.io/tags/AI/"/>
    
    <category term="API调用" scheme="https://eatbreads.github.io/tags/API%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Rust命令行参数解析 - clap库使用指南</title>
    <link href="https://eatbreads.github.io/posts/6d327ffd.html"/>
    <id>https://eatbreads.github.io/posts/6d327ffd.html</id>
    <published>2025-04-28T05:45:27.000Z</published>
    <updated>2025-04-28T05:46:42.298Z</updated>
    
    <content type="html"><![CDATA[<h1>Rust命令行参数解析：clap库使用指南</h1><h2 id="简介">简介</h2><p>clap (Command Line Argument Parser) 是Rust生态系统中最流行的命令行参数解析库之一。它提供了直观的API和丰富的功能，使得构建命令行应用变得简单。</p><h2 id="基本使用">基本使用</h2><h3 id="1-添加依赖">1. 添加依赖</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">clap</span> = <span class="string">&quot;2.33&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建命令行应用">2. 创建命令行应用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> clap::&#123;App, Arg&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">app</span> = App::<span class="title function_ invoke__">new</span>(<span class="string">&quot;blockchain-demo&quot;</span>)    <span class="comment">// 应用名称</span></span><br><span class="line">        .<span class="title function_ invoke__">version</span>(<span class="string">&quot;0.1&quot;</span>)                      <span class="comment">// 版本号</span></span><br><span class="line">        .<span class="title function_ invoke__">author</span>(<span class="string">&quot;Your Name&quot;</span>)                 <span class="comment">// 作者信息</span></span><br><span class="line">        .<span class="title function_ invoke__">about</span>(<span class="string">&quot;区块链演示程序&quot;</span>);            <span class="comment">// 应用描述</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-添加子命令">3. 添加子命令</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">app</span> = App::<span class="title function_ invoke__">new</span>(<span class="string">&quot;blockchain-demo&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">version</span>(<span class="string">&quot;0.1&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">author</span>(<span class="string">&quot;Your Name&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">about</span>(<span class="string">&quot;区块链演示程序&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">subcommand</span>(App::<span class="title function_ invoke__">new</span>(<span class="string">&quot;printchain&quot;</span>))      <span class="comment">// 添加无参数子命令</span></span><br><span class="line">    .<span class="title function_ invoke__">subcommand</span>(</span><br><span class="line">        App::<span class="title function_ invoke__">new</span>(<span class="string">&quot;addblock&quot;</span>)                 <span class="comment">// 添加带参数子命令</span></span><br><span class="line">            .<span class="title function_ invoke__">arg</span>(Arg::<span class="title function_ invoke__">from_usage</span>(<span class="string">&quot;&lt;data&gt; &#x27;the blockchain data&#x27;&quot;</span>))</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="4-解析参数">4. 解析参数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">matches</span> = app.<span class="title function_ invoke__">get_matches</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查子命令</span></span><br><span class="line">    <span class="keyword">match</span> matches.<span class="title function_ invoke__">subcommand</span>() &#123;</span><br><span class="line">        (<span class="string">&quot;printchain&quot;</span>, <span class="title function_ invoke__">Some</span>(_)) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理printchain命令</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;打印区块链&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        (<span class="string">&quot;addblock&quot;</span>, <span class="title function_ invoke__">Some</span>(add_matches)) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取data参数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(data) = add_matches.<span class="title function_ invoke__">value_of</span>(<span class="string">&quot;data&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;添加区块: &#123;&#125;&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;未知命令&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数处理方法">参数处理方法</h2><h3 id="1-检查子命令">1. 检查子命令</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> matches) = matches.<span class="title function_ invoke__">subcommand_matches</span>(<span class="string">&quot;addblock&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理addblock子命令</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取参数值">2. 获取参数值</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(value) = matches.<span class="title function_ invoke__">value_of</span>(<span class="string">&quot;参数名&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取多值参数">3. 获取多值参数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(values) = matches.<span class="title function_ invoke__">values_of</span>(<span class="string">&quot;参数名&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">value</span> <span class="keyword">in</span> values &#123;</span><br><span class="line">        <span class="comment">// 处理每个值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行使用示例">命令行使用示例</h2><h3 id="查看帮助">查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run -- --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">blockchain-demo 0.1</span><br><span class="line">Your Name</span><br><span class="line">区块链演示程序</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    blockchain-demo [SUBCOMMAND]</span><br><span class="line"></span><br><span class="line">FLAGS:</span><br><span class="line">    -h, <span class="params">--help</span>       Prints <span class="keyword">help</span> information</span><br><span class="line">    -V, <span class="params">--version</span>    Prints <span class="keyword">version</span> information</span><br><span class="line"></span><br><span class="line">SUBCOMMANDS:</span><br><span class="line">    addblock     </span><br><span class="line">    <span class="keyword">help</span>         Prints this message or the <span class="keyword">help</span> of the given subcommand<span class="params">(s)</span></span><br><span class="line">    printchain</span><br></pre></td></tr></table></figure><h3 id="执行子命令">执行子命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印区块链</span></span><br><span class="line">cargo run -- printchain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加区块</span></span><br><span class="line">cargo run -- addblock <span class="string">&quot;这是第一个区块的数据&quot;</span></span><br></pre></td></tr></table></figure><h2 id="高级特性">高级特性</h2><h3 id="1-参数验证">1. 参数验证</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_ invoke__">arg</span>(Arg::<span class="title function_ invoke__">with_name</span>(<span class="string">&quot;count&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">short</span>(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">long</span>(<span class="string">&quot;count&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">takes_value</span>(<span class="literal">true</span>)</span><br><span class="line">    .<span class="title function_ invoke__">validator</span>(|s| &#123;</span><br><span class="line">        s.parse::&lt;<span class="type">i32</span>&gt;()</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|_| ())</span><br><span class="line">            .<span class="title function_ invoke__">map_err</span>(|_| <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;必须是数字&quot;</span>))</span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure><h3 id="2-默认值">2. 默认值</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_ invoke__">arg</span>(Arg::<span class="title function_ invoke__">with_name</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">long</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">default_value</span>(<span class="string">&quot;default&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-参数组">3. 参数组</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_ invoke__">args_group</span>(ArgGroup::<span class="title function_ invoke__">with_name</span>(<span class="string">&quot;group&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">args</span>(&amp;[<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>])</span><br><span class="line">    .<span class="title function_ invoke__">required</span>(<span class="literal">true</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍Rust中使用clap库进行命令行参数解析的方法，包括基本配置、参数定义和使用示例</summary>
    
    
    
    <category term="后端开发" scheme="https://eatbreads.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="开发工具" scheme="https://eatbreads.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="CLI" scheme="https://eatbreads.github.io/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>Sled - Rust的嵌入式键值数据库</title>
    <link href="https://eatbreads.github.io/posts/4e9334eb.html"/>
    <id>https://eatbreads.github.io/posts/4e9334eb.html</id>
    <published>2025-04-28T05:43:26.000Z</published>
    <updated>2025-04-28T05:44:49.167Z</updated>
    
    <content type="html"><![CDATA[<h1>Sled简介</h1><p>Sled是一个用纯Rust实现的嵌入式键值数据库，它具有以下特点：</p><ul><li>纯Rust实现，保证内存安全</li><li>嵌入式设计，无需独立服务器</li><li>类Redis的键值对存储</li><li>本地文件持久化</li><li>高性能和可靠性</li></ul><h2 id="与传统数据库的区别">与传统数据库的区别</h2><h3 id="传统数据库-如MySQL">传统数据库(如MySQL)</h3><ul><li>需要独立的数据库服务器</li><li>需要开放网络端口</li><li>客户端-服务器架构</li><li>支持复杂的SQL查询</li></ul><h3 id="嵌入式数据库-如Sled">嵌入式数据库(如Sled)</h3><ul><li>直接嵌入应用程序</li><li>使用本地文件存储</li><li>无需网络连接</li><li>简单的键值对操作</li></ul><h2 id="基本使用">基本使用</h2><h3 id="1-添加依赖">1. 添加依赖</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">sled</span> = <span class="string">&quot;0.34&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-打开数据库">2. 打开数据库</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> sled::Db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> sled::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// 打开数据库，如果不存在会自动创建</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db</span> = sled::<span class="title function_ invoke__">open</span>(<span class="string">&quot;data/blocks&quot;</span>)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-基本操作">3. 基本操作</h3><h4 id="存储数据">存储数据</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入键值对</span></span><br><span class="line">db.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>)?;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字节数组</span></span><br><span class="line">db.<span class="title function_ invoke__">insert</span>(<span class="string">b&quot;key&quot;</span>, <span class="string">b&quot;value&quot;</span>)?;</span><br></pre></td></tr></table></figure><h4 id="读取数据">读取数据</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="keyword">match</span> db.<span class="title function_ invoke__">get</span>(<span class="string">&quot;key&quot;</span>)? &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;找到值: &#123;:?&#125;&quot;</span>, value),</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;未找到值&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除数据">删除数据</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line">db.<span class="title function_ invoke__">remove</span>(<span class="string">&quot;key&quot;</span>)?;</span><br></pre></td></tr></table></figure><h4 id="持久化">持久化</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保数据写入磁盘</span></span><br><span class="line">db.<span class="title function_ invoke__">flush</span>()?;</span><br></pre></td></tr></table></figure><h2 id="高级特性">高级特性</h2><h3 id="1-原子操作">1. 原子操作</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较并设置</span></span><br><span class="line">db.<span class="title function_ invoke__">compare_and_swap</span>(<span class="string">&quot;key&quot;</span>, <span class="title function_ invoke__">Some</span>(<span class="string">&quot;old&quot;</span>), <span class="title function_ invoke__">Some</span>(<span class="string">&quot;new&quot;</span>))?;</span><br></pre></td></tr></table></figure><h3 id="2-批量操作">2. 批量操作</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">batch</span> = sled::Batch::<span class="title function_ invoke__">default</span>()</span><br><span class="line">    .<span class="title function_ invoke__">insert</span>(<span class="string">b&quot;k1&quot;</span>, <span class="string">b&quot;v1&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">insert</span>(<span class="string">b&quot;k2&quot;</span>, <span class="string">b&quot;v2&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">remove</span>(<span class="string">b&quot;k3&quot;</span>);</span><br><span class="line">db.<span class="title function_ invoke__">apply_batch</span>(batch)?;</span><br></pre></td></tr></table></figure><h3 id="3-事务支持">3. 事务支持</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tree</span> = db.<span class="title function_ invoke__">open_tree</span>(<span class="string">&quot;my_tree&quot;</span>)?;</span><br><span class="line">tree.<span class="title function_ invoke__">transaction</span>(|tree| &#123;</span><br><span class="line">    tree.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>)?;</span><br><span class="line">    tree.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;)?;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍Rust生态中的嵌入式键值数据库Sled，包括其基本概念、特性以及常用操作方法</summary>
    
    
    
    <category term="后端开发" scheme="https://eatbreads.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="数据库" scheme="https://eatbreads.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="嵌入式" scheme="https://eatbreads.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GitHub README中的便捷跳转功能介绍</title>
    <link href="https://eatbreads.github.io/posts/e16aa73e.html"/>
    <id>https://eatbreads.github.io/posts/e16aa73e.html</id>
    <published>2025-04-26T14:22:30.000Z</published>
    <updated>2025-04-26T14:24:04.213Z</updated>
    
    <content type="html"><![CDATA[<h1>GitHub README中的便捷跳转功能</h1><p>在GitHub项目开发中，README文件不仅仅是项目的说明书，还可以作为项目开发历程的导航。本文将介绍如何在README中实现便捷的代码版本跳转功能。</p><h2 id="基本语法">基本语法</h2><h3 id="1-分支跳转">1. 分支跳转</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">分支名称</span>](<span class="link">https://github.com/用户名/仓库名/tree/分支名</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">初始提交</span>](<span class="link">https://github.com/eatbreads/bitcoin_demo/tree/initial</span>)</span><br></pre></td></tr></table></figure><h3 id="2-特定commit跳转">2. 特定commit跳转</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">commit描述</span>](<span class="link">https://github.com/用户名/仓库名/tree/commit哈希</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">commit eb822486</span>](<span class="link">https://github.com/eatbreads/bitcoin_demo/tree/eb822486</span>)</span><br></pre></td></tr></table></figure><h2 id="实际应用示例">实际应用示例</h2><p>以下是一个区块链项目的开发阶段说明：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 开发阶段</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> part1: Basic Prototype <span class="code">`基本原型`</span>              </span><br><span class="line">   [<span class="string">初始提交</span>](<span class="link">https://github.com/eatbreads/bitcoin_demo/tree/initial</span>)</span><br><span class="line"><span class="bullet">   -</span> 实现区块结构</span><br><span class="line"><span class="bullet">   -</span> 实现基础区块链</span><br><span class="line"><span class="bullet">   -</span> 创世区块生成</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> part2: Proof-of-Work <span class="code">`工作量证明`</span>            </span><br><span class="line">   [<span class="string">commit eb822486</span>](<span class="link">https://github.com/eatbreads/bitcoin_demo/tree/eb822486</span>)</span><br><span class="line"><span class="bullet">   -</span> 实现工作量证明算法</span><br><span class="line"><span class="bullet">   -</span> 添加挖矿功能</span><br><span class="line"><span class="bullet">   -</span> 区块哈希计算</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> part3: Persistence and CLI <span class="code">`持久化和命令行`</span>  </span><br><span class="line">   [<span class="string">commit 8880dd2</span>](<span class="link">https://github.com/eatbreads/bitcoin_demo/tree/8880dd2</span>)</span><br><span class="line"><span class="bullet">   -</span> 使用 sled 实现数据持久化</span><br><span class="line"><span class="bullet">   -</span> 添加命令行交互界面</span><br><span class="line"><span class="bullet">   -</span> 实现区块链遍历功能</span><br></pre></td></tr></table></figure><h2 id="使用技巧">使用技巧</h2><ol><li><p><strong>版本标记</strong></p><ul><li>重要功能完成后及时创建tag或分支</li><li>使用有意义的commit message</li><li>记录关键commit的哈希值</li></ul></li><li><p><strong>README组织</strong></p><ul><li>按开发阶段划分章节</li><li>每个阶段标注对应的分支或commit</li><li>列出该阶段的主要功能点</li></ul></li><li><p><strong>链接管理</strong></p><ul><li>使用相对路径而非完整URL</li><li>保持链接格式统一</li><li>定期检查链接有效性</li></ul></li></ol><p>这种跳转功能不仅方便了项目的管理和维护，也为其他开发者学习和参考项目提供了清晰的路径指引。</p>]]></content>
    
    
    <summary type="html">介绍如何在GitHub的README中实现便捷的代码版本跳转，包括分支跳转和commit哈希跳转等功能</summary>
    
    
    
    <category term="开发技巧" scheme="https://eatbreads.github.io/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="GitHub" scheme="https://eatbreads.github.io/tags/GitHub/"/>
    
    <category term="Markdown" scheme="https://eatbreads.github.io/tags/Markdown/"/>
    
    <category term="开发工具" scheme="https://eatbreads.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>比特币简易实现代码(三)：交易系统与余额查询</title>
    <link href="https://eatbreads.github.io/posts/ea2afd4d.html"/>
    <id>https://eatbreads.github.io/posts/ea2afd4d.html</id>
    <published>2025-04-24T15:27:12.000Z</published>
    <updated>2025-04-24T15:36:47.759Z</updated>
    
    <content type="html"><![CDATA[<h1>比特币交易系统实现</h1><h2 id="核心数据结构">核心数据结构</h2><h3 id="1-交易结构">1. 交易结构</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Transaction</span> &#123;</span><br><span class="line">    id: <span class="type">String</span>,</span><br><span class="line">    vin: <span class="type">Vec</span>&lt;TXInput&gt;,</span><br><span class="line">    vout: <span class="type">Vec</span>&lt;TXOutput&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-交易输出-TXOutput">2. 交易输出(TXOutput)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TXOutput</span> &#123;</span><br><span class="line">    value: <span class="type">i64</span>,        <span class="comment">// 以satoshi为单位</span></span><br><span class="line">    script_pub_key: <span class="type">String</span>,  <span class="comment">// 锁定脚本(接收方地址/公钥)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>value表示代金券金额</li><li>script_pub_key定义使用规则</li></ul></blockquote><h3 id="3-交易输入-TXInput">3. 交易输入(TXInput)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TXInput</span> &#123;</span><br><span class="line">    txid: <span class="type">String</span>,      <span class="comment">// 引用的交易ID</span></span><br><span class="line">    vout: <span class="type">i32</span>,         <span class="comment">// 输出索引</span></span><br><span class="line">    script_sig: <span class="type">String</span>, <span class="comment">// 解锁脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>vout指明使用哪个输出作为本次输入</li><li>未被引用的输出即为余额</li></ul></blockquote><h2 id="功能实现">功能实现</h2><h3 id="1-创世交易">1. 创世交易</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Transaction</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new_coinbase</span>(to: <span class="type">String</span>, data: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        Transaction &#123;</span><br><span class="line">            id: <span class="type">String</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">            vin: <span class="built_in">vec!</span>[TXInput &#123;</span><br><span class="line">                txid: <span class="type">String</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">                vout: -<span class="number">1</span>,</span><br><span class="line">                script_sig: data,</span><br><span class="line">            &#125;],</span><br><span class="line">            vout: <span class="built_in">vec!</span>[TXOutput &#123;</span><br><span class="line">                value: <span class="number">50</span> * <span class="number">100_000_000</span>, <span class="comment">// 50 BTC</span></span><br><span class="line">                script_pub_key: to,</span><br><span class="line">            &#125;],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-余额查询实现">2. 余额查询实现</h3><h4 id="查找未花费交易">查找未花费交易</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Blockchain</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">find_unspent_transactions</span>(&amp;<span class="keyword">self</span>, address: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;Transaction&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">unspent_txs</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">spent_outputs</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">block</span> <span class="keyword">in</span> <span class="keyword">self</span>.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">tx</span> <span class="keyword">in</span> block.transactions &#123;</span><br><span class="line">                <span class="comment">// 记录已花费输出</span></span><br><span class="line">                <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> &amp;tx.vin &#123;</span><br><span class="line">                    <span class="keyword">if</span> input.<span class="title function_ invoke__">can_unlock_output_with</span>(address) &#123;</span><br><span class="line">                        spent_outputs.<span class="title function_ invoke__">insert</span>((input.txid.<span class="title function_ invoke__">clone</span>(), input.vout));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 查找未花费输出</span></span><br><span class="line">                <span class="keyword">for</span> (i, output) <span class="keyword">in</span> tx.vout.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">                    <span class="keyword">if</span> !spent_outputs.<span class="title function_ invoke__">contains_key</span>(&amp;(tx.id.<span class="title function_ invoke__">clone</span>(), i <span class="keyword">as</span> <span class="type">i32</span>))</span><br><span class="line">                        &amp;&amp; output.<span class="title function_ invoke__">can_be_unlocked_with</span>(address) &#123;</span><br><span class="line">                        unspent_txs.<span class="title function_ invoke__">push</span>(tx.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unspent_txs</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算余额">计算余额</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Blockchain</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_balance</span>(&amp;<span class="keyword">self</span>, address: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">i64</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">balance</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">utxos</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">find_unspent_transactions</span>(address);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="variable">tx</span> <span class="keyword">in</span> utxos &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">output</span> <span class="keyword">in</span> tx.vout &#123;</span><br><span class="line">                <span class="keyword">if</span> output.<span class="title function_ invoke__">can_be_unlocked_with</span>(address) &#123;</span><br><span class="line">                    balance += output.value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        balance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="余额查询流程">余额查询流程</h2><p><img src="https://cdn-a.markji.com/files/6809e95d6092fd692c50f89a_hd.png?e=1745509881827&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:NhrH-qO9mCnJGszcenPcMuhyC5I=" alt="图片1"></p><h3 id="1-初始化">1. 初始化</h3><ul><li>创建未花费交易切片</li><li>创建已花费输出映射</li></ul><h3 id="2-遍历区块链">2. 遍历区块链</h3><ul><li>获取区块链迭代器</li><li>遍历每个区块直到创世块</li></ul><h3 id="3-处理交易">3. 处理交易</h3><ul><li>遍历区块中所有交易</li><li>记录已花费输出</li><li>查找未花费输出</li></ul><h3 id="4-验证所有权">4. 验证所有权</h3><ul><li>检查输出是否能被地址解锁</li><li>确认输出未被后续交易花费</li></ul><h3 id="5-计算最终余额">5. 计算最终余额</h3><ul><li>累加所有未花费输出的值</li><li>返回总余额</li></ul><h2 id="实现特点">实现特点</h2><ol><li>采用UTXO模型</li><li>支持多输入多输出</li><li>实现基础脚本系统</li><li>提供余额查询功能</li><li>支持新交易创建</li></ol>]]></content>
    
    
    <summary type="html">实现比特币的交易系统和余额查询功能，包括交易结构设计、UTXO模型和余额计算</summary>
    
    
    
    <category term="区块链技术" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="比特币" scheme="https://eatbreads.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>比特币简易实现代码(一)：基础结构</title>
    <link href="https://eatbreads.github.io/posts/460941b6.html"/>
    <id>https://eatbreads.github.io/posts/460941b6.html</id>
    <published>2025-04-23T15:40:50.000Z</published>
    <updated>2025-04-23T15:43:58.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比特币核心结构实现"><a href="#比特币核心结构实现" class="headerlink" title="比特币核心结构实现"></a>比特币核心结构实现</h1><h3 id="1-区块结构设计"><a href="#1-区块结构设计" class="headerlink" title="1. 区块结构设计"></a>1. 区块结构设计</h3><ul><li>定义Block结构体，包含时间戳、前哈希、数据和当前哈希</li><li>实现计算当前哈希的方法</li></ul><h3 id="2-区块链设计"><a href="#2-区块链设计" class="headerlink" title="2. 区块链设计"></a>2. 区块链设计</h3><ul><li>定义Blockchain结构体，包含区块数组</li><li>实现添加区块的方法</li><li>实现创世块生成功能</li></ul><h3 id="3-工作量证明机制"><a href="#3-工作量证明机制" class="headerlink" title="3. 工作量证明机制"></a>3. 工作量证明机制</h3><ul><li>定义ProofOfWork结构体，包含区块引用和目标值</li><li>实现构造函数，设置难度目标</li><li>实现数据准备方法</li><li>实现挖矿运行方法</li><li>实现有效性验证</li></ul><p>9.修改addblock函数,在其中调用工作量证明,run成功了才执行添加</p><p>10.定义确认区块有效区块,确认一下之前Run不是因为溢出而结束</p><h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><h3 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::Utc;</span><br><span class="line"><span class="keyword">use</span> sha2::&#123;Sha256, Digest&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    timestamp: <span class="type">i64</span>,</span><br><span class="line">    prev_hash: <span class="type">String</span>,</span><br><span class="line">    hash: <span class="type">String</span>,</span><br><span class="line">    data: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">calculate_hash</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = Sha256::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">data</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span>, <span class="keyword">self</span>.timestamp, <span class="keyword">self</span>.prev_hash, <span class="keyword">self</span>.data);</span><br><span class="line">        hasher.<span class="title function_ invoke__">update</span>(data);</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finalize</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区块链结构"><a href="#区块链结构" class="headerlink" title="区块链结构"></a>区块链结构</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Blockchain</span> &#123;</span><br><span class="line">    blocks: <span class="type">Vec</span>&lt;Block&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Blockchain</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">chain</span> = Blockchain &#123;</span><br><span class="line">            blocks: <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">        &#125;;</span><br><span class="line">        chain.<span class="title function_ invoke__">create_genesis_block</span>();</span><br><span class="line">        chain</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">create_genesis_block</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">genesis</span> = Block &#123;</span><br><span class="line">            timestamp: Utc::<span class="title function_ invoke__">now</span>().<span class="title function_ invoke__">timestamp</span>(),</span><br><span class="line">            prev_hash: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">            data: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Genesis Block&quot;</span>),</span><br><span class="line">            hash: <span class="type">String</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">hash</span> = genesis.<span class="title function_ invoke__">calculate_hash</span>();</span><br><span class="line">        <span class="keyword">self</span>.blocks.<span class="title function_ invoke__">push</span>(Block &#123;</span><br><span class="line">            hash,</span><br><span class="line">            ..genesis</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作量证明实现"><a href="#工作量证明实现" class="headerlink" title="工作量证明实现"></a>工作量证明实现</h2><h3 id="PoW结构"><a href="#PoW结构" class="headerlink" title="PoW结构"></a>PoW结构</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ProofOfWork</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    block: &amp;<span class="symbol">&#x27;a</span> Block,</span><br><span class="line">    target: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; ProofOfWork&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(block: &amp;<span class="symbol">&#x27;a</span> Block) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="comment">// 设置难度目标：前5位为0</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">target</span> = <span class="string">&quot;00000&quot;</span>.<span class="title function_ invoke__">to_string</span>() + &amp;<span class="string">&quot;f&quot;</span>.<span class="title function_ invoke__">repeat</span>(<span class="number">59</span>);</span><br><span class="line">        ProofOfWork &#123; block, target &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">prepare_data</span>(&amp;<span class="keyword">self</span>, nonce: <span class="type">i64</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(</span><br><span class="line">            <span class="string">&quot;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span>,</span><br><span class="line">            <span class="keyword">self</span>.block.timestamp,</span><br><span class="line">            <span class="keyword">self</span>.block.prev_hash,</span><br><span class="line">            <span class="keyword">self</span>.block.data,</span><br><span class="line">            nonce</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> (<span class="type">i64</span>, <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">nonce</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">max_nonce</span> = <span class="type">i64</span>::MAX;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hash</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> nonce &lt; max_nonce &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">data</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">prepare_data</span>(nonce);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = Sha256::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            hasher.<span class="title function_ invoke__">update</span>(data);</span><br><span class="line">            hash = <span class="built_in">format!</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finalize</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> hash &lt; <span class="keyword">self</span>.target &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nonce += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        (nonce, hash)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">validate</span>(&amp;<span class="keyword">self</span>, nonce: <span class="type">i64</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">data</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">prepare_data</span>(nonce);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = Sha256::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        hasher.<span class="title function_ invoke__">update</span>(data);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">hash</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finalize</span>());</span><br><span class="line">        hash &lt; <span class="keyword">self</span>.target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加新区块"><a href="#添加新区块" class="headerlink" title="添加新区块"></a>添加新区块</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Blockchain</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add_block</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, data: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">prev_block</span> = <span class="keyword">self</span>.blocks.<span class="title function_ invoke__">last</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">new_block</span> = Block &#123;</span><br><span class="line">            timestamp: Utc::<span class="title function_ invoke__">now</span>().<span class="title function_ invoke__">timestamp</span>(),</span><br><span class="line">            prev_hash: prev_block.hash.<span class="title function_ invoke__">clone</span>(),</span><br><span class="line">            data,</span><br><span class="line">            hash: <span class="type">String</span>::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">pow</span> = ProofOfWork::<span class="title function_ invoke__">new</span>(&amp;new_block);</span><br><span class="line">        <span class="keyword">let</span> (nonce, hash) = pow.<span class="title function_ invoke__">run</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pow.<span class="title function_ invoke__">validate</span>(nonce) &#123;</span><br><span class="line">            <span class="keyword">self</span>.blocks.<span class="title function_ invoke__">push</span>(Block &#123;</span><br><span class="line">                hash,</span><br><span class="line">                ..new_block</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现：</p><ol><li>使用Rust的类型系统确保内存安全</li><li>采用trait实现更好的代码组织</li><li>使用chrono处理时间戳</li><li>使用sha2进行哈希计算</li><li>所有字符串采用String类型，避免字符串切片的生命周期问题</li></ol><p>要使用这段代码，需要在Cargo.toml中添加以下依赖：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">chrono</span> = <span class="string">&quot;0.4&quot;</span></span><br><span class="line"><span class="attr">sha2</span> = <span class="string">&quot;0.10&quot;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">使用Rust实现比特币的基础结构，包括区块、区块链、工作量证明等核心概念的代码实现</summary>
    
    
    
    <category term="区块链技术" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://eatbreads.github.io/tags/Rust/"/>
    
    <category term="比特币" scheme="https://eatbreads.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>区块链与比特币原理简述</title>
    <link href="https://eatbreads.github.io/posts/3fc00ad7.html"/>
    <id>https://eatbreads.github.io/posts/3fc00ad7.html</id>
    <published>2025-04-23T15:38:12.000Z</published>
    <updated>2025-04-23T15:43:58.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链基础知识"><a href="#区块链基础知识" class="headerlink" title="区块链基础知识"></a>区块链基础知识</h1><h2 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h2><p>简易版区块包含以下内容：</p><ul><li>时间戳</li><li>前哈希</li><li>当前哈希</li><li>实际data（交易信息）</li></ul><h3 id="哈希计算"><a href="#哈希计算" class="headerlink" title="哈希计算"></a>哈希计算</h3><p>当前哈希的计算方法：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前哈希 = <span class="type">SHA256</span>(时间戳 + 前哈希 + 实际<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure></p><h3 id="本质特征"><a href="#本质特征" class="headerlink" title="本质特征"></a>本质特征</h3><p>区块链本质是一个分布式数据库，每个区块通过哈希值链接到前一个区块。</p><h2 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h2><h3 id="为什么需要共识"><a href="#为什么需要共识" class="headerlink" title="为什么需要共识"></a>为什么需要共识</h3><ul><li>区块链是分布式数据库</li><li>没有中心化控制者</li><li>新区块的加入需要其他参与者同意</li></ul><h3 id="工作量证明-PoW"><a href="#工作量证明-PoW" class="headerlink" title="工作量证明(PoW)"></a>工作量证明(PoW)</h3><p>需要完成繁重的计算工作才能获得添加新区块的权力。</p><h2 id="哈希函数应用"><a href="#哈希函数应用" class="headerlink" title="哈希函数应用"></a>哈希函数应用</h2><p>哈希函数主要用途：</p><ul><li>检测数据一致性</li><li>验证文件完整性</li><li>建立数据与哈希值的一一对应关系</li></ul><h2 id="比特币挖矿算法"><a href="#比特币挖矿算法" class="headerlink" title="比特币挖矿算法"></a>比特币挖矿算法</h2><h3 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h3><ol><li>组合数据：<ul><li>时间戳</li><li>前哈希</li><li>实际data</li></ul></li><li>使用计数器(nonce)递增</li><li>不断计算哈希值</li><li>直到找到符合条件的结果</li></ol><h3 id="难度要求"><a href="#难度要求" class="headerlink" title="难度要求"></a>难度要求</h3><ul><li>目标：哈希值前20位为0</li><li>成功概率：1/2^20</li><li>验证方法：比较哈希值是否小于0x000000…</li></ul><p>ps：nonce是一个密码学术语，在这里作为计数器使用。</p>]]></content>
    
    
    <summary type="html">简要介绍区块链基础知识和比特币工作量证明算法的核心原理</summary>
    
    
    
    <category term="区块链技术" scheme="https://eatbreads.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://eatbreads.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="比特币" scheme="https://eatbreads.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    <category term="加密货币" scheme="https://eatbreads.github.io/tags/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>音视频开发常见面试题解析(一)</title>
    <link href="https://eatbreads.github.io/posts/ee93bc5b.html"/>
    <id>https://eatbreads.github.io/posts/ee93bc5b.html</id>
    <published>2025-04-20T15:37:56.000Z</published>
    <updated>2025-04-20T15:39:10.894Z</updated>
    
    <content type="html"><![CDATA[<h1>音视频开发核心问题解析</h1><h2 id="解码与渲染流程">解码与渲染流程</h2><h3 id="解码过程">解码过程</h3><ul><li>H.264解码输出：YUV420P/YUV格式</li><li>AAC解码输出：PCM格式</li></ul><h3 id="渲染实现">渲染实现</h3><ul><li>使用OpenGL将YUV分量上传为纹理</li><li>通过着色器完成YUV到RGB的转换</li></ul><h3 id="音视频同步">音视频同步</h3><ul><li>利用帧的PTS做时钟同步</li></ul><h3 id="音频帧丢失处理">音频帧丢失处理</h3><ol><li><p>视频丢帧方案</p><ul><li>丢弃部分视频帧使视频追上音频</li></ul></li><li><p>音频补偿方案</p><ul><li>填充静音或插值补足缺失片段</li><li>适用于不允许丢视频帧的场景</li></ul></li><li><p>动态速率调整</p><ul><li>通过加快或减慢视频播放重新同步</li></ul></li></ol><p>注：丢帧或填充静音是直播场景下最常用的方案</p><h2 id="花屏问题处理">花屏问题处理</h2><h3 id="产生原因">产生原因</h3><ol><li><p>关键帧丢失</p><ul><li>导致后续B帧和P帧无法显示</li></ul></li><li><p>元数据变化</p><ul><li>分辨率、帧率、编码格式等参数变化</li><li>播放器适应问题</li></ul></li><li><p>硬件兼容性</p><ul><li>主要出现在安卓设备</li></ul></li><li><p>颜色格式不一致</p><ul><li>推流和播放端格式不匹配</li></ul></li></ol><h3 id="解决方案">解决方案</h3><ol><li><p>丢帧处理优化</p><ul><li>必须丢帧时应丢弃整个GOP</li></ul></li><li><p>参数稳定性</p><ul><li>保持直播编码参数稳定</li></ul></li><li><p>解码方案调整</p><ul><li>尝试软解码对比</li><li>建立设备兼容性名单</li></ul></li><li><p>格式统一</p><ul><li>统一推流和拉流的颜色格式</li></ul></li></ol><h2 id="跳帧问题分析">跳帧问题分析</h2><h3 id="原因分析">原因分析</h3><ol><li>帧率与刷新率不匹配</li><li>解码/渲染性能不足</li><li>网络抖动影响</li><li>音视频同步机制问题</li></ol><h2 id="服务器性能评估">服务器性能评估</h2><h3 id="测试维度">测试维度</h3><ol><li><p>并发能力</p><ul><li>同时观看和推流路数</li></ul></li><li><p>带宽评估</p><ul><li>总出口带宽</li><li>CDN分发能力</li></ul></li><li><p>转码负载</p><ul><li>CPU/GPU资源评估</li></ul></li><li><p>系统稳定性</p><ul><li>端到端延迟</li><li>丢包率</li><li>故障恢复能力</li></ul></li></ol><h2 id="IPC摄像头方案">IPC摄像头方案</h2><h3 id="设备来源">设备来源</h3><ol><li>自研/ODM</li><li>第三方厂商（海康、大华等）</li></ol><h3 id="通信协议">通信协议</h3><ol><li><p>RTSP+RTP</p><ul><li>主流摄像头默认支持</li></ul></li><li><p>GB28181</p><ul><li>国内安防标准</li><li>SIP 5060端口注册</li></ul></li><li><p>ONVIF</p><ul><li>国际通用协议</li><li>支持设备发现和控制</li></ul></li></ol><h2 id="音视频平台架构">音视频平台架构</h2><h3 id="核心模块">核心模块</h3><ol><li><p>用户权限模块</p><ul><li>登录认证</li><li>鉴权管理</li><li>Token管理</li></ul></li><li><p>前端/客户端</p><ul><li>播放功能</li><li>管理交互</li></ul></li><li><p>流媒体服务</p><ul><li>推流/拉流</li><li>协议转发</li><li>转码支持</li></ul></li><li><p>存储服务</p><ul><li>录像保存</li><li>截图存储</li><li>检索回放</li></ul></li><li><p>设备管理</p><ul><li>摄像头注册</li><li>状态监控</li><li>控制命令下发</li></ul></li></ol>]]></content>
    
    
    <summary type="html">详细解析音视频开发中的常见面试题，包括解码渲染、音视频同步、花屏处理等核心问题</summary>
    
    
    
    <category term="音视频开发" scheme="https://eatbreads.github.io/categories/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="音视频" scheme="https://eatbreads.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    <category term="FFmpeg" scheme="https://eatbreads.github.io/tags/FFmpeg/"/>
    
    <category term="面试题" scheme="https://eatbreads.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>c++高性能定时器实现</title>
    <link href="https://eatbreads.github.io/posts/9b96a9aa.html"/>
    <id>https://eatbreads.github.io/posts/9b96a9aa.html</id>
    <published>2025-04-19T15:40:01.000Z</published>
    <updated>2025-04-19T15:43:52.439Z</updated>
    
    <content type="html"><![CDATA[<h1>直接上代码</h1><ul><li>分为两种,一种是多线程,一种是时间线</li></ul><p><img src="https://cdn-a.markji.com/files/665d1b26a552a1096b431e0a_hd.png?e=1745079714430&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:T3e2SKI2rJZDxMbrZUMOE08y7xU=" alt="图片1"><br>多线程<br><img src="https://cdn-a.markji.com/files/665d1c76a552a1096b434126_hd.png?e=1745079714430&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:aUtkOolbkxAQmAYlIALpGfsQI7E=" alt="图片1"><br><img src="https://cdn-a.markji.com/files/665d1c856c5f0515e269b414_hd.png?e=1745079714430&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:yo_YNaaP25uc9dTjrUv40gzObRg=" alt="图片1"><br>时间线<br><img src="https://cdn-a.markji.com/files/665d1c9fa552a1096b4343fc_hd.png?e=1745079714430&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:23Ja14SqyjRKfF6hreKLzGv9OsI=" alt="图片1"><br>二更：这边大于now就会直接退出，因为multmap是递增排序，后续的肯定也是大于的</p><p>然后这个内层if是处理新加的timer是否要处理的操作</p><p><img src="https://cdn-a.markji.com/files/665d1caca552a1096b4344dd_hd.png?e=1745079714431&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:bIH2WjAE2GeEgWkSotaPDXkV4p0=" alt="图片1"><br><img src="https://cdn-a.markji.com/files/665d1cbba552a1096b434603_hd.png?e=1745079714431&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:H95QUaSiuHzo-ic0ssQCXDKcoL0=" alt="图片1"><br><img src="https://cdn-a.markji.com/files/665d1cc7a552a1096b4346b0_hd.png?e=1745079714431&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:EGFfv1vxmawSyr-fg_GFmsuZz9o=" alt="图片1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;直接上代码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分为两种,一种是多线程,一种是时间线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-a.markji.com/files/665d1b26a552a1096b431e0a_hd.png?e=17450797</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WebRTC的JavaScript简单实现</title>
    <link href="https://eatbreads.github.io/posts/e8866bd2.html"/>
    <id>https://eatbreads.github.io/posts/e8866bd2.html</id>
    <published>2025-04-17T12:26:35.000Z</published>
    <updated>2025-04-17T15:28:53.308Z</updated>
    
    <content type="html"><![CDATA[<h1>WebRTC视频聊天实现</h1><h2 id="核心功能实现">核心功能实现</h2><h3 id="1-请求访问用户设备">1. 请求访问用户设备</h3><p>使用<code>navigator.mediaDevices.getUserMedia()</code>请求访问用户的摄像头和麦克风</p><h3 id="2-创建Peer连接">2. 创建Peer连接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peer = <span class="keyword">new</span> <span class="title class_">Peer</span>();</span><br><span class="line">peer.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="comment">// 连接成功后获取ID</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-监听外部连接">3. 监听外部连接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">peer.<span class="title function_">on</span>(<span class="string">&#x27;call&#x27;</span>, <span class="keyword">function</span>(<span class="params">call</span>) &#123;</span><br><span class="line">    <span class="comment">// 监听来电</span></span><br><span class="line">    call.<span class="title function_">answer</span>(localStream);  <span class="comment">// 回复并发送本地视频流</span></span><br><span class="line">    call.<span class="title function_">on</span>(<span class="string">&#x27;stream&#x27;</span>, <span class="keyword">function</span>(<span class="params">remoteStream</span>) &#123;</span><br><span class="line">        <span class="comment">// 监听对方的远程视频流</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-发起通信">4. 发起通信</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer.<span class="title function_">call</span>(remoteId, localStream);</span><br></pre></td></tr></table></figure><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>视频聊天<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/peerjs/1.3.1/peerjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>本地视频<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;localVideo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px;height: 300px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left&quot;</span>&gt;</span></span><br><span class="line">    自己ID<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myPeerid&quot;</span>/&gt;</span>(自动获取)</span><br><span class="line">    对方ID<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;youPeerid&quot;</span>/&gt;</span>(请手动输入)</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;callBtn&quot;</span>&gt;</span>聊天<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>远程视频<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;remoteVideo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px;height: 300px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//访问用户媒体设备的兼容方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getUserMedia</span>(<span class="params">constrains,success,error</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(navigator.<span class="property">mediaDevices</span>.<span class="property">getUserMedia</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//最新标准API</span></span></span><br><span class="line"><span class="language-javascript">            navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(constrains).<span class="title function_">then</span>(success).<span class="title function_">catch</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">webkitGetUserMedia</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//webkit内核浏览器</span></span></span><br><span class="line"><span class="language-javascript">            navigator.<span class="title function_">webkitGetUserMedia</span>(constrains).<span class="title function_">then</span>(success).<span class="title function_">catch</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">mozGetUserMedia</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//Firefox浏览器</span></span></span><br><span class="line"><span class="language-javascript">            navagator.<span class="title function_">mozGetUserMedia</span>(constrains).<span class="title function_">then</span>(success).<span class="title function_">catch</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">getUserMedia</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//旧版API</span></span></span><br><span class="line"><span class="language-javascript">            navigator.<span class="title function_">getUserMedia</span>(constrains).<span class="title function_">then</span>(success).<span class="title function_">catch</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> localVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video#localVideo&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> remoteVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video#remoteVideo&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> localStream = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取本地媒体流</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getUserMedia</span>(&#123;<span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span>(<span class="params">stream</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            localStream = stream;</span></span><br><span class="line"><span class="language-javascript">            localVideo.<span class="property">srcObject</span> = stream;</span></span><br><span class="line"><span class="language-javascript">            localVideo.<span class="property">autoplay</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            localVideo.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Failed to get local stream&#x27;</span> ,err);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建Peer连接</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> peer = <span class="keyword">new</span> <span class="title class_">Peer</span>();</span></span><br><span class="line"><span class="language-javascript">        peer.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#myPeerid&quot;</span>).<span class="title function_">val</span>(id);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听呼叫</span></span></span><br><span class="line"><span class="language-javascript">        peer.<span class="title function_">on</span>(<span class="string">&#x27;call&#x27;</span>, <span class="keyword">function</span>(<span class="params">call</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            call.<span class="title function_">answer</span>(localStream);</span></span><br><span class="line"><span class="language-javascript">            call.<span class="title function_">on</span>(<span class="string">&#x27;stream&#x27;</span>, <span class="keyword">function</span>(<span class="params">remoteStream</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(remoteStream);</span></span><br><span class="line"><span class="language-javascript">                remoteVideo.<span class="property">srcObject</span> = remoteStream;</span></span><br><span class="line"><span class="language-javascript">                remoteVideo.<span class="property">autoplay</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发起呼叫</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#callBtn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> remoteId = $(<span class="string">&quot;#youPeerid&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(remoteId == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;请输入对方ID&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> call = peer.<span class="title function_">call</span>(remoteId, localStream);</span></span><br><span class="line"><span class="language-javascript">            call.<span class="title function_">on</span>(<span class="string">&#x27;stream&#x27;</span>, <span class="keyword">function</span>(<span class="params">remoteStream</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(remoteStream);</span></span><br><span class="line"><span class="language-javascript">                remoteVideo.<span class="property">srcObject</span> = remoteStream;</span></span><br><span class="line"><span class="language-javascript">                remoteVideo.<span class="property">autoplay</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            call.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call close&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                _this.<span class="property">loading</span>.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            call.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span><br><span class="line"><span class="language-javascript">                _this.<span class="property">loading</span>.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="功能说明">功能说明</h2><ol><li>页面加载后自动请求摄像头权限</li><li>连接成功后自动获取并显示本地ID</li><li>输入对方ID后可发起视频通话</li><li>支持接收对方视频通话请求</li><li>自动显示本地和远程视频流</li></ol><h2 id="兼容性处理">兼容性处理</h2><p>代码中包含了对不同浏览器的兼容处理：</p><ul><li>最新标准API</li><li>webkit内核浏览器</li><li>Firefox浏览器</li><li>旧版API</li></ul>]]></content>
    
    
    <summary type="html">使用JavaScript实现基于WebRTC的视频聊天功能，包括获取媒体流、建立P2P连接等核心功能</summary>
    
    
    
    <category term="前端开发" scheme="https://eatbreads.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="音视频" scheme="https://eatbreads.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    <category term="WebRTC" scheme="https://eatbreads.github.io/tags/WebRTC/"/>
    
    <category term="JavaScript" scheme="https://eatbreads.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>常见的封装格式mp4,flv,hls</title>
    <link href="https://eatbreads.github.io/posts/109395ab.html"/>
    <id>https://eatbreads.github.io/posts/109395ab.html</id>
    <published>2025-04-16T15:51:09.000Z</published>
    <updated>2025-04-17T06:55:21.315Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
